// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Scrutin.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CalculDuResultatDunScrutinMajoritaireFeature : object, Xunit.IClassFixture<CalculDuResultatDunScrutinMajoritaireFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Scrutin.feature"
#line hidden
        
        public CalculDuResultatDunScrutinMajoritaireFeature(CalculDuResultatDunScrutinMajoritaireFeature.FixtureData fixtureData, Scrutin_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Calcul du résultat d\'un scrutin majoritaire", "    En tant que client de l\'API\r\n    À la cloture d\'un scrutin majoritaire\r\n    J" +
                    "e veux calculer le résultat du scrutin\r\n    Pour obtenir le vainqueur du vote", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Un candidat obtient plus de 50% des voix au premier tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du résultat d\'un scrutin majoritaire")]
        [Xunit.TraitAttribute("Description", "Un candidat obtient plus de 50% des voix au premier tour")]
        public virtual void UnCandidatObtientPlusDe50DesVoixAuPremierTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Un candidat obtient plus de 50% des voix au premier tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table1.AddRow(new string[] {
                            "Nouhaila"});
                table1.AddRow(new string[] {
                            "Ilyass"});
                table1.AddRow(new string[] {
                            "Lina"});
#line 8
    testRunner.Given("un scrutin avec les candidats suivants", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table2.AddRow(new string[] {
                            "Nouhaila",
                            "60"});
                table2.AddRow(new string[] {
                            "Ilyass",
                            "25"});
                table2.AddRow(new string[] {
                            "Lina",
                            "15"});
#line 13
    testRunner.And("que les votes suivants ont été enregistrés", ((string)(null)), table2, "And ");
#line hidden
#line 18
    testRunner.When("je cloture le scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
    testRunner.Then("le vainqueur devrait être \"Nouhaila\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.And("Nouhaila devrait avoir 60% des voix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.And("le scrutin devrait être terminé en 1 tour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Aucun candidat n\'obtient plus de 50% au premier tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du résultat d\'un scrutin majoritaire")]
        [Xunit.TraitAttribute("Description", "Aucun candidat n\'obtient plus de 50% au premier tour")]
        public virtual void AucunCandidatNobtientPlusDe50AuPremierTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aucun candidat n\'obtient plus de 50% au premier tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table3.AddRow(new string[] {
                            "Nouhaila"});
                table3.AddRow(new string[] {
                            "Ilyass"});
                table3.AddRow(new string[] {
                            "Lina"});
#line 24
    testRunner.Given("un scrutin avec les candidats suivants", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table4.AddRow(new string[] {
                            "Nouhaila",
                            "40"});
                table4.AddRow(new string[] {
                            "Ilyass",
                            "35"});
                table4.AddRow(new string[] {
                            "Lina",
                            "25"});
#line 29
    testRunner.And("que les votes suivants ont été enregistrés", ((string)(null)), table4, "And ");
#line hidden
#line 34
    testRunner.When("je cloture le scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
    testRunner.Then("il devrait y avoir un second tour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
    testRunner.And("les candidats pour le second tour devraient être \"Nouhaila\" et \"Ilyass\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Vainqueur au second tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du résultat d\'un scrutin majoritaire")]
        [Xunit.TraitAttribute("Description", "Vainqueur au second tour")]
        public virtual void VainqueurAuSecondTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vainqueur au second tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Votes"});
                table5.AddRow(new string[] {
                            "Nouhaila",
                            "55"});
                table5.AddRow(new string[] {
                            "Ilyass",
                            "45"});
#line 39
    testRunner.Given("un scrutin au second tour avec les candidats suivants", ((string)(null)), table5, "Given ");
#line hidden
#line 43
    testRunner.When("je cloture le scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
    testRunner.Then("le vainqueur devrait être \"Nouhaila\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
    testRunner.And("le scrutin devrait être terminé en 2 tours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Égalité au dernier tour - aucun vainqueur")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du résultat d\'un scrutin majoritaire")]
        [Xunit.TraitAttribute("Description", "Égalité au dernier tour - aucun vainqueur")]
        public virtual void EgaliteAuDernierTour_AucunVainqueur()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Égalité au dernier tour - aucun vainqueur", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Votes"});
                table6.AddRow(new string[] {
                            "Nouhaila",
                            "50"});
                table6.AddRow(new string[] {
                            "Ilyass",
                            "50"});
#line 48
    testRunner.Given("un scrutin au second tour avec les candidats suivants", ((string)(null)), table6, "Given ");
#line hidden
#line 52
    testRunner.When("je cloture le scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
    testRunner.Then("il ne devrait pas y avoir de vainqueur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
    testRunner.And("le scrutin devrait être terminé en 2 tours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Égalité pour la deuxième place au premier tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du résultat d\'un scrutin majoritaire")]
        [Xunit.TraitAttribute("Description", "Égalité pour la deuxième place au premier tour")]
        public virtual void EgalitePourLaDeuxiemePlaceAuPremierTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Égalité pour la deuxième place au premier tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table7.AddRow(new string[] {
                            "Nouhaila"});
                table7.AddRow(new string[] {
                            "Ilyass"});
                table7.AddRow(new string[] {
                            "Lina"});
                table7.AddRow(new string[] {
                            "Ahmed"});
#line 57
    testRunner.Given("un scrutin avec les candidats suivants", ((string)(null)), table7, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table8.AddRow(new string[] {
                            "Nouhaila",
                            "40"});
                table8.AddRow(new string[] {
                            "Ilyass",
                            "30"});
                table8.AddRow(new string[] {
                            "Lina",
                            "30"});
                table8.AddRow(new string[] {
                            "Ahmed",
                            "0"});
#line 63
    testRunner.And("que les votes suivants ont été enregistrés", ((string)(null)), table8, "And ");
#line hidden
#line 69
    testRunner.When("je cloture le scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
    testRunner.Then("il devrait y avoir un second tour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.And("les candidats pour le second tour devraient être \"Nouhaila\", \"Ilyass\" et \"Lina\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Égalité parfaite entre tous les candidats au premier tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du résultat d\'un scrutin majoritaire")]
        [Xunit.TraitAttribute("Description", "Égalité parfaite entre tous les candidats au premier tour")]
        public virtual void EgaliteParfaiteEntreTousLesCandidatsAuPremierTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Égalité parfaite entre tous les candidats au premier tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table9.AddRow(new string[] {
                            "Nouhaila"});
                table9.AddRow(new string[] {
                            "Ilyass"});
                table9.AddRow(new string[] {
                            "Lina"});
#line 74
    testRunner.Given("un scrutin avec les candidats suivants", ((string)(null)), table9, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table10.AddRow(new string[] {
                            "Nouhaila",
                            "33"});
                table10.AddRow(new string[] {
                            "Ilyass",
                            "33"});
                table10.AddRow(new string[] {
                            "Lina",
                            "33"});
#line 79
    testRunner.And("que les votes suivants ont été enregistrés", ((string)(null)), table10, "And ");
#line hidden
#line 84
    testRunner.When("je cloture le scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
    testRunner.Then("il devrait y avoir un second tour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.And("tous les candidats devraient passer au second tour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Vainqueur au premier tour avec présence de votes blancs")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du résultat d\'un scrutin majoritaire")]
        [Xunit.TraitAttribute("Description", "Vainqueur au premier tour avec présence de votes blancs")]
        public virtual void VainqueurAuPremierTourAvecPresenceDeVotesBlancs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vainqueur au premier tour avec présence de votes blancs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table11.AddRow(new string[] {
                            "Nouhaila"});
                table11.AddRow(new string[] {
                            "Ilyass"});
                table11.AddRow(new string[] {
                            "Lina"});
#line 89
    testRunner.Given("un scrutin avec les candidats suivants", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table12.AddRow(new string[] {
                            "Nouhaila",
                            "55"});
                table12.AddRow(new string[] {
                            "Ilyass",
                            "20"});
                table12.AddRow(new string[] {
                            "Lina",
                            "15"});
#line 94
    testRunner.And("que les votes suivants ont été enregistrés", ((string)(null)), table12, "And ");
#line hidden
#line 99
    testRunner.And("que 10 votes blancs ont été enregistrés", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
    testRunner.When("je cloture le scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
    testRunner.Then("le vainqueur devrait être \"Nouhaila\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
    testRunner.And("Nouhaila devrait avoir 55% des voix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
    testRunner.And("il devrait y avoir 10 votes blancs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
    testRunner.And("le total des suffrages exprimés devrait être 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Second tour nécessaire avec présence de votes blancs")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du résultat d\'un scrutin majoritaire")]
        [Xunit.TraitAttribute("Description", "Second tour nécessaire avec présence de votes blancs")]
        public virtual void SecondTourNecessaireAvecPresenceDeVotesBlancs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Second tour nécessaire avec présence de votes blancs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table13.AddRow(new string[] {
                            "Nouhaila"});
                table13.AddRow(new string[] {
                            "Ilyass"});
                table13.AddRow(new string[] {
                            "Lina"});
#line 107
    testRunner.Given("un scrutin avec les candidats suivants", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table14.AddRow(new string[] {
                            "Nouhaila",
                            "40"});
                table14.AddRow(new string[] {
                            "Ilyass",
                            "35"});
                table14.AddRow(new string[] {
                            "Lina",
                            "15"});
#line 112
    testRunner.And("que les votes suivants ont été enregistrés", ((string)(null)), table14, "And ");
#line hidden
#line 117
    testRunner.And("que 10 votes blancs ont été enregistrés", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.When("je cloture le scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
    testRunner.Then("il devrait y avoir un second tour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
    testRunner.And("les candidats pour le second tour devraient être \"Nouhaila\" et \"Ilyass\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
    testRunner.And("Nouhaila devrait avoir 40% des voix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
    testRunner.And("Ilyass devrait avoir 35% des voix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Égalité au second tour avec votes blancs")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du résultat d\'un scrutin majoritaire")]
        [Xunit.TraitAttribute("Description", "Égalité au second tour avec votes blancs")]
        public virtual void EgaliteAuSecondTourAvecVotesBlancs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Égalité au second tour avec votes blancs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Votes"});
                table15.AddRow(new string[] {
                            "Nouhaila",
                            "45"});
                table15.AddRow(new string[] {
                            "Ilyass",
                            "45"});
#line 125
    testRunner.Given("un scrutin au second tour avec les candidats suivants", ((string)(null)), table15, "Given ");
#line hidden
#line 129
    testRunner.And("que 10 votes blancs ont été enregistrés", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
    testRunner.When("je cloture le scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
    testRunner.Then("il ne devrait pas y avoir de vainqueur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
    testRunner.And("le scrutin devrait être terminé en 2 tours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
    testRunner.And("il devrait y avoir 10 votes blancs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CalculDuResultatDunScrutinMajoritaireFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CalculDuResultatDunScrutinMajoritaireFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
